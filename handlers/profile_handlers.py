from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from services.database import save_user_data
from services.weather_api import fetch_temperature
from utils.states import ProfileStates
import logging

router = Router()

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —á–∏—Å–ª–æ
def is_valid_number(text: str) -> bool:
    try:
        float(text)
        return True
    except ValueError:
        return False

# ‚úÖ –ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
@router.message(Command("set_profile"))
async def set_profile(message: Message, state: FSMContext):
    await message.answer("üìå –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(ProfileStates.weight)

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–µ—Å–∞
@router.message(ProfileStates.weight, F.text)
async def process_weight(message: Message, state: FSMContext):
    if not is_valid_number(message.text):
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70).")
        return

    await state.update_data(weight=float(message.text))
    await message.answer("‚úÖ –í–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    await state.set_state(ProfileStates.height)

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞
@router.message(ProfileStates.height, F.text)
async def process_height(message: Message, state: FSMContext):
    if not is_valid_number(message.text):
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175).")
        return

    await state.update_data(height=float(message.text))
    await message.answer("‚úÖ –†–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(ProfileStates.age)

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
@router.message(ProfileStates.age, F.text)
async def process_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25).")
        return

    await state.update_data(age=int(message.text))
    await message.answer("‚úÖ –í–æ–∑—Ä–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    await state.set_state(ProfileStates.activity)

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@router.message(ProfileStates.activity, F.text)
async def process_activity(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 60).")
        return

    await state.update_data(activity=int(message.text))
    await message.answer("‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    await state.set_state(ProfileStates.city)

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
@router.message(ProfileStates.city, F.text)
async def process_city(message: Message, state: FSMContext):
    city = message.text
    city, temperature = fetch_temperature(city)

    if temperature is None:
        await message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.")
        return

    await state.update_data(city=city, temperature=temperature)

    data = await state.get_data()
    await message.answer(
        f"üéØ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"üîπ –í–µ—Å: {data['weight']} –∫–≥\n"
        f"üîπ –†–æ—Å—Ç: {data['height']} —Å–º\n"
        f"üîπ –í–æ–∑—Ä–∞—Å—Ç: {data['age']} –ª–µ—Ç\n"
        f"üîπ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data['activity']} –º–∏–Ω/–¥–µ–Ω—å\n"
        f"üåç –ì–æ—Ä–æ–¥: {data['city']}\n"
        f"üå° –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['temperature']}¬∞C\n\n"
        f"‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ? –ù–∞–ø–∏—à–∏—Ç–µ '–î–∞' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ '–ù–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )

    await state.set_state(ProfileStates.confirm)

# ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@router.message(ProfileStates.confirm, F.text)
async def process_confirmation(message: Message, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        user_data = await state.get_data()
        save_user_data(message.from_user.id, user_data)

        await message.answer("üéâ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! üéØ\n\n"
                             f"üåç –ì–æ—Ä–æ–¥: {user_data['city']}\n"
                             f"üå° –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {user_data['temperature']}¬∞C\n"
                             "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤–æ–¥—É, –µ–¥—É –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
        await state.clear()
    elif message.text.lower() == "–Ω–µ—Ç":
        await message.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /set_profile.")
        await state.clear()
    else:
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")

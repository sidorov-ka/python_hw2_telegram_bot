from aiogram import types
from aiogram.fsm.context import FSMContext
from database import update_user, get_user, log_food_entry


async def log_water_intake(message: types.Message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    user_id = message.from_user.id

    try:
        water_amount = int(message.text)
        if water_amount <= 0:
            raise ValueError

        user_data = await get_user(user_id)
        if not user_data:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å: /set_profile")
            return

        new_logged_water = user_data["logged_water"] + water_amount
        await update_user(user_id, "logged_water", new_logged_water)

        await message.answer(f"üíß –í—ã –∑–∞–ø–∏—Å–∞–ª–∏ {water_amount} –º–ª –≤–æ–¥—ã!\n"
                             f"–í—Å–µ–≥–æ –∑–∞ –¥–µ–Ω—å: {new_logged_water} –º–ª –∏–∑ {user_data['water_goal']} –º–ª.")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 250).")


async def log_food_intake(message: types.Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏ –≤ –ë–î."""
    user_id = message.from_user.id
    food_data = message.text.split(",")

    if len(food_data) != 3:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ(–≥), –ö–∞–ª–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –Ø–±–ª–æ–∫–æ, 150, 80)")
        return

    try:
        food_name = food_data[0].strip()
        quantity = int(food_data[1].strip())
        calories = float(food_data[2].strip())

        await log_food_entry(user_id, food_name, quantity, calories)

        user_data = await get_user(user_id)
        new_logged_calories = user_data["logged_calories"] + calories
        await update_user(user_id, "logged_calories", new_logged_calories)

        await message.answer(f"üçé –í—ã –¥–æ–±–∞–≤–∏–ª–∏: {food_name} ({quantity}–≥, {calories} –∫–∫–∞–ª)\n"
                             f"–í—Å–µ–≥–æ –∑–∞ –¥–µ–Ω—å: {new_logged_calories} –∏–∑ {user_data['calorie_goal']} –∫–∫–∞–ª.")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ(–≥), –ö–∞–ª–æ—Ä–∏–∏")


async def log_burned_calories(message: types.Message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∂–∂—ë–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π."""
    user_id = message.from_user.id

    try:
        burned_calories = int(message.text)
        if burned_calories <= 0:
            raise ValueError

        user_data = await get_user(user_id)
        if not user_data:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å: /set_profile")
            return

        new_burned_calories = user_data["burned_calories"] + burned_calories
        await update_user(user_id, "burned_calories", new_burned_calories)

        await message.answer(f"üî• –í—ã –∑–∞–ø–∏—Å–∞–ª–∏ {burned_calories} –∫–∫–∞–ª –∫–∞–∫ —Å–æ–∂–∂–µ–Ω–Ω—ã–µ!\n"
                             f"–í—Å–µ–≥–æ –∑–∞ –¥–µ–Ω—å: {new_burned_calories} –∫–∫–∞–ª.")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∂–∂—ë–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 300).")


async def get_progress(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –¥–µ–Ω—å."""
    user_id = message.from_user.id
    user_data = await get_user(user_id)

    if not user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å: /set_profile")
        return

    progress_message = (f"üìä *–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n"
                        f"üíß –í–æ–¥–∞: {user_data['logged_water']} / {user_data['water_goal']} –º–ª\n"
                        f"üî• –ö–∞–ª–æ—Ä–∏–∏: {user_data['logged_calories']} / {user_data['calorie_goal']} –∫–∫–∞–ª\n"
                        f"‚ö° –°–æ–∂–∂–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {user_data['burned_calories']} –∫–∫–∞–ª")

    await message.answer(progress_message, parse_mode="Markdown")


def register_progress_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    dp.register_message_handler(log_water_intake, commands="log_water")
    dp.register_message_handler(log_food_intake, commands="log_food")
    dp.register_message_handler(log_burned_calories, commands="log_burned")
    dp.register_message_handler(get_progress, commands="progress")

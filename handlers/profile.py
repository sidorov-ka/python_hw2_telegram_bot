from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.fsm.context import FSMContext
from states import ProfileStates
from database import insert_user, update_user, get_user

async def set_profile_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = await get_user(user_id)

    if user_data:
        await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ? (–Ω–∞–ø–∏—à–∏—Ç–µ /reset_profile)")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(ProfileStates.weight)

async def set_profile_weight(message: types.Message, state: FSMContext):
    try:
        weight = float(message.text)
        await state.update_data(weight=weight)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
        await state.set_state(ProfileStates.height)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

async def set_profile_height(message: types.Message, state: FSMContext):
    try:
        height = int(message.text)
        await state.update_data(height=height)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
        await state.set_state(ProfileStates.age)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

async def set_profile_age(message: types.Message, state: FSMContext):
    try:
        age = int(message.text)
        await state.update_data(age=age)
        await message.answer("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
        await state.set_state(ProfileStates.activity)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

async def set_profile_activity(message: types.Message, state: FSMContext):
    try:
        activity = int(message.text)
        await state.update_data(activity=activity)
        await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
        await state.set_state(ProfileStates.city)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

async def set_profile_city(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()

    city = message.text
    weight = data.get("weight")
    height = data.get("height")
    age = data.get("age")
    activity = data.get("activity")

    water_goal, calorie_goal = calculate_goals(weight, height, age, activity)

    await insert_user(user_id, weight, height, age, activity, city, water_goal, calorie_goal)

    await message.answer(f"–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\nüíß –í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {water_goal} –º–ª\nüî• –í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calorie_goal} –∫–∫–∞–ª")
    await state.clear()


def calculate_goals(weight, height, age, activity, gender):
    water_goal = round(weight * 35)  # 35 –º–ª –Ω–∞ –∫–≥ –º–∞—Å—Å—ã

    if gender == "male":
        calorie_goal = round((10 * weight) + (6.25 * height) - (5 * age) + 5 + (activity * 10))
    else:
        calorie_goal = round((10 * weight) + (6.25 * height) - (5 * age) - 161 + (activity * 10))

    return water_goal, calorie_goal

def register_profile_handlers(dp: Dispatcher):
    dp.register_message_handler(set_profile_start, commands="set_profile")
    dp.register_message_handler(set_profile_weight, state=ProfileStates.weight)
    dp.register_message_handler(set_profile_height, state=ProfileStates.height)
    dp.register_message_handler(set_profile_age, state=ProfileStates.age)
    dp.register_message_handler(set_profile_activity, state=ProfileStates.activity)
    dp.register_message_handler(set_profile_city, state=ProfileStates.city)

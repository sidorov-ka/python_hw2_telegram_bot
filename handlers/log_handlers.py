from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from services.database import get_user_data, save_user_data
from services.food_api import get_calories
from utils.states import FoodStates, WaterStates, WorkoutStates
import logging

router = Router()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")


# ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–¥—ã —á–µ—Ä–µ–∑ FSM
@router.message(Command("log_water"))
async def log_water_start(message: Message, state: FSMContext):
    await message.answer("üíß –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã (–º–ª):")
    await state.set_state(WaterStates.quantity)


@router.message(WaterStates.quantity)
async def log_water_finish(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    if not user_data:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile.")
        await state.clear()
        return

    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError

        user_data["logged_water"] = user_data.get("logged_water", 0) + amount
        save_user_data(user_id, user_data)
        await message.answer(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {amount} –º–ª –≤–æ–¥—ã.")
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–º–ª).")

    await state.clear()


# ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥—ã —á–µ—Ä–µ–∑ FSM
@router.message(Command("log_food"))
async def log_food_start(message: Message, state: FSMContext):
    await message.answer("üçΩ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:")
    await state.set_state(FoodStates.name)


@router.message(FoodStates.name)
async def log_food_name(message: Message, state: FSMContext):
    food_name = message.text.strip()

    try:
        calories = get_calories(food_name)
        if not calories:
            await message.answer("‚ö† –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
            await state.clear()
            return

        await state.update_data(food_name=food_name, calories=calories)
        await message.answer(f"{food_name} —Å–æ–¥–µ—Ä–∂–∏—Ç {calories} –∫–∫–∞–ª –Ω–∞ 100 –≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º–æ–≤ –≤—ã —Å—ä–µ–ª–∏?")
        await state.set_state(FoodStates.quantity)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ Nutritionix API: {e}")
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()


@router.message(FoodStates.quantity)
async def log_food_quantity(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    if not user_data:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile.")
        await state.clear()
        return

    try:
        quantity = float(message.text)
        if quantity <= 0:
            raise ValueError

        data = await state.get_data()
        food_name = data["food_name"]
        calories_per_100g = data["calories"]
        total_calories = (calories_per_100g / 100) * quantity

        user_data["logged_calories"] = user_data.get("logged_calories", 0) + total_calories
        save_user_data(user_id, user_data)

        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {food_name}, {quantity} –≥ ‚Äî {total_calories:.2f} –∫–∫–∞–ª.")
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–≥—Ä–∞–º–º—ã).")

    await state.clear()


# ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —á–µ—Ä–µ–∑ FSM
@router.message(Command("log_workout"))
async def log_workout_start(message: Message, state: FSMContext):
    await message.answer("üèã –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
    await state.set_state(WorkoutStates.type)


@router.message(WorkoutStates.type)
async def log_workout_type(message: Message, state: FSMContext):
    workout_type = message.text.strip()
    await state.update_data(workout_type=workout_type)
    await message.answer(f"‚åõ –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö):")
    await state.set_state(WorkoutStates.duration)

# –¢–∞–±–ª–∏—Ü–∞ MET
MET_VALUES = {
    "running": 9.8,
    "cycling": 7.5,
    "swimming": 8.0,
    "yoga": 3.0,
    "weightlifting": 6.0,
}

@router.message(WorkoutStates.duration)
async def log_workout_duration(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    if not user_data or "weight" not in user_data:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile.")
        await state.clear()
        return

    try:
        duration = int(message.text)
        if duration <= 0:
            raise ValueError

        data = await state.get_data()
        workout_type = data["workout_type"].lower()

        if workout_type not in MET_VALUES:
            available_workouts = ", ".join(MET_VALUES.keys())
            await message.answer(f"‚ö† –í–∏–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {available_workouts}")
            await state.clear()
            return

        met = MET_VALUES[workout_type]
        weight = user_data["weight"]
        burned_calories = met * weight * (duration / 60)  # –ü–µ—Ä–µ–≤–æ–¥ –º–∏–Ω—É—Ç –≤ —á–∞—Å—ã

        user_data["burned_calories"] = user_data.get("burned_calories", 0) + burned_calories
        save_user_data(user_id, user_data)

        await message.answer(f"‚úÖ {workout_type} ({duration} –º–∏–Ω—É—Ç) ‚Äî {burned_calories:.2f} –∫–∫–∞–ª —Å–æ–∂–∂–µ–Ω–æ.")
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–º–∏–Ω—É—Ç—ã).")

    await state.clear()
